{"name": "test_verifyValidationMessageIsDisplayedOnProvidingIncorrectLoginDetails[chrome-test@gmail.com-test123]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=119.0.6045.160)\nStacktrace:\n\tGetHandleVerifier [0x00AC72A3+45731]\n\t(No symbol) [0x00A52D51]\n\t(No symbol) [0x009486D0]\n\t(No symbol) [0x0097CAC4]\n\t(No symbol) [0x00974FC0]\n\t(No symbol) [0x00997FDC]\n\t(No symbol) [0x00974A4E]\n\t(No symbol) [0x00998254]\n\t(No symbol) [0x009AB7A2]\n\t(No symbol) [0x00997DD6]\n\t(No symbol) [0x009731F6]\n\t(No symbol) [0x0097439D]\n\tGetHandleVerifier [0x00DD0716+3229462]\n\tGetHandleVerifier [0x00E184C8+3523784]\n\tGetHandleVerifier [0x00E1214C+3498316]\n\tGetHandleVerifier [0x00B51680+611968]\n\t(No symbol) [0x00A5CCCC]\n\t(No symbol) [0x00A58DF8]\n\t(No symbol) [0x00A58F1D]\n\t(No symbol) [0x00A4B2C7]\n\tBaseThreadInitThunk [0x75CE7BA9+25]\n\tRtlInitializeExceptionChain [0x775DBD2B+107]\n\tRtlClearBits [0x775DBCAF+191]", "trace": "self = <tests.amazon_suite_test.Test_LoginPage object at 0x000002623EFD06A0>\nusername = 'test@gmail.com', password = 'test123'\n\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.Smoke\n    @pytest.mark.AmazonHomeTest\n    @pytest.mark.parametrize(\"username,password\", [(\"test@gmail.com\", \"test123\"), (\"test123@gmail.com\", \"HelloBye\")])\n    def test_verifyValidationMessageIsDisplayedOnProvidingIncorrectLoginDetails(self, username, password):\n        log = self.getLogger()\n        homePage = HomePage(self.driver)\n>       loginPage= homePage.clickSignInPageButton()\n\namazon_suite_test.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pageObjects\\HomePage.py:42: in clickSignInPageButton\n    self.getSignInButton().click()\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:81: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:740: in _execute\n    return self._parent.execute(command, params)\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:430: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000262402D3F10>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...dInitThunk [0x75CE7BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x775DBD2B+107]\\\\n\\\\tRtlClearBits [0x775DBCAF+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=119.0.6045.160)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00AC72A3+45731]\nE       \t(No symbol) [0x00A52D51]\nE       \t(No symbol) [0x009486D0]\nE       \t(No symbol) [0x0097CAC4]\nE       \t(No symbol) [0x00974FC0]\nE       \t(No symbol) [0x00997FDC]\nE       \t(No symbol) [0x00974A4E]\nE       \t(No symbol) [0x00998254]\nE       \t(No symbol) [0x009AB7A2]\nE       \t(No symbol) [0x00997DD6]\nE       \t(No symbol) [0x009731F6]\nE       \t(No symbol) [0x0097439D]\nE       \tGetHandleVerifier [0x00DD0716+3229462]\nE       \tGetHandleVerifier [0x00E184C8+3523784]\nE       \tGetHandleVerifier [0x00E1214C+3498316]\nE       \tGetHandleVerifier [0x00B51680+611968]\nE       \t(No symbol) [0x00A5CCCC]\nE       \t(No symbol) [0x00A58DF8]\nE       \t(No symbol) [0x00A58F1D]\nE       \t(No symbol) [0x00A4B2C7]\nE       \tBaseThreadInitThunk [0x75CE7BA9+25]\nE       \tRtlInitializeExceptionChain [0x775DBD2B+107]\nE       \tRtlClearBits [0x775DBCAF+191]\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: ElementNotInteractableException"}, "attachments": [{"name": "HomePage", "source": "dcd8507a-e49c-43f2-98a8-c3ac03a38f8d-attachment.png", "type": "image/png"}], "parameters": [{"name": "setup", "value": "'chrome'"}, {"name": "username", "value": "'test@gmail.com'"}, {"name": "password", "value": "'test123'"}], "start": 1700505942599, "stop": 1700505945018, "uuid": "a7264d9c-bf2b-4f6b-ab2d-e6feb0fef084", "historyId": "6c33a66c2c650e09fa400dc9d2f7796c", "testCaseId": "cf79ac4d4e879ea724c90e60e38cc401", "fullName": "tests.amazon_suite_test.Test_LoginPage#test_verifyValidationMessageIsDisplayedOnProvidingIncorrectLoginDetails", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "AmazonHomeTest"}, {"name": "tag", "value": "Smoke"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "amazon_suite_test"}, {"name": "subSuite", "value": "Test_LoginPage"}, {"name": "host", "value": "DESKTOP-NN1215C"}, {"name": "thread", "value": "5016-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.amazon_suite_test"}]}