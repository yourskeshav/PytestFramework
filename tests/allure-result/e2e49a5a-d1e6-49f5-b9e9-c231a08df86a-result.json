{"name": "test_verifyAmazonHomeSignInPage[chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//span[text()='Hello, Sign in']\"}\n  (Session info: chrome=116.0.5845.97)\nStacktrace:\n\tGetHandleVerifier [0x004737C3+48947]\n\t(No symbol) [0x00408551]\n\t(No symbol) [0x0030C92D]\n\t(No symbol) [0x00339E38]\n\t(No symbol) [0x00339EFB]\n\t(No symbol) [0x00368EF2]\n\t(No symbol) [0x003550D4]\n\t(No symbol) [0x003675DA]\n\t(No symbol) [0x00354E86]\n\t(No symbol) [0x003316C7]\n\t(No symbol) [0x0033284D]\n\tGetHandleVerifier [0x006BFDF9+2458985]\n\tGetHandleVerifier [0x0070744F+2751423]\n\tGetHandleVerifier [0x00701361+2726609]\n\tGetHandleVerifier [0x004F0680+560624]\n\t(No symbol) [0x0041238C]\n\t(No symbol) [0x0040E268]\n\t(No symbol) [0x0040E392]\n\t(No symbol) [0x004010B7]\n\tBaseThreadInitThunk [0x75EB7D59+25]\n\tRtlInitializeExceptionChain [0x77A4B79B+107]\n\tRtlClearBits [0x77A4B71F+191]", "trace": "self = <tests.amazon_suite_test.Test_AmazonHomePage object at 0x0000021F8E278E20>\n\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.AmazonHomeTest\n    def test_verifyAmazonHomeSignInPage(self):\n        log = self.getLogger()\n        homePage = HomePage(self.driver)\n>       homePage.verifySignInButtonDisplayed()\n\namazon_suite_test.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pageObjects\\HomePage.py:34: in verifySignInButtonDisplayed\n    self.getSignInButton().is_displayed()\n..\\pageObjects\\HomePage.py:29: in getSignInButton\n    return self.findElementByXpath(self.signInButton)\n..\\utilities\\BaseClass.py:186: in findElementByXpath\n    return self.driver.find_element_by_xpath(Xpath)\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:526: in find_element_by_xpath\n    return self.find_element(by=By.XPATH, value=xpath)\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1251: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:430: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021F8E2B2310>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...dInitThunk [0x75EB7D59+25]\\\\n\\\\tRtlInitializeExceptionChain [0x77A4B79B+107]\\\\n\\\\tRtlClearBits [0x77A4B71F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//span[text()='Hello, Sign in']\"}\nE         (Session info: chrome=116.0.5845.97)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x004737C3+48947]\nE       \t(No symbol) [0x00408551]\nE       \t(No symbol) [0x0030C92D]\nE       \t(No symbol) [0x00339E38]\nE       \t(No symbol) [0x00339EFB]\nE       \t(No symbol) [0x00368EF2]\nE       \t(No symbol) [0x003550D4]\nE       \t(No symbol) [0x003675DA]\nE       \t(No symbol) [0x00354E86]\nE       \t(No symbol) [0x003316C7]\nE       \t(No symbol) [0x0033284D]\nE       \tGetHandleVerifier [0x006BFDF9+2458985]\nE       \tGetHandleVerifier [0x0070744F+2751423]\nE       \tGetHandleVerifier [0x00701361+2726609]\nE       \tGetHandleVerifier [0x004F0680+560624]\nE       \t(No symbol) [0x0041238C]\nE       \t(No symbol) [0x0040E268]\nE       \t(No symbol) [0x0040E392]\nE       \t(No symbol) [0x004010B7]\nE       \tBaseThreadInitThunk [0x75EB7D59+25]\nE       \tRtlInitializeExceptionChain [0x77A4B79B+107]\nE       \tRtlClearBits [0x77A4B71F+191]\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: NoSuchElementException"}, "attachments": [{"name": "HomePage", "source": "af946fdc-0dfc-4b09-8b94-6eb05a098a96-attachment.png", "type": "image/png"}], "parameters": [{"name": "setup", "value": "'chrome'"}], "start": 1692691401202, "stop": 1692691405868, "uuid": "b21ce681-6a82-4121-80b6-fe86eb563f8c", "historyId": "d8cc4f8d5c6ee2f8e1b56b48414a5718", "testCaseId": "ff378c85b19e8f0fd428d03ea29961f5", "fullName": "tests.amazon_suite_test.Test_AmazonHomePage#test_verifyAmazonHomeSignInPage", "labels": [{"name": "severity", "value": "normal"}, {"name": "tag", "value": "AmazonHomeTest"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "amazon_suite_test"}, {"name": "subSuite", "value": "Test_AmazonHomePage"}, {"name": "host", "value": "DESKTOP-NN1215C"}, {"name": "thread", "value": "16564-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.amazon_suite_test"}]}