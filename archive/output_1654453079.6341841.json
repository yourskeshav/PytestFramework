{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}, "tests": {"0": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_VerifyAmazonHomeSignInPage>>\n\n    @pytest.fixture(scope=\"class\")\n    def setup(request):\n        global driver\n        getPlatform()\n        # global driver\n        browser_name = request.config.getoption(\"--browser_name\")\n        env_name = request.config.getoption(\"--env_name\")\n    \n        # invoke driverusing webdriver manager\n        if browser_name == \"chrome\":\n            driver = webdriver.Chrome(ChromeDriverManager().install())\n            chrome_options = webdriver.ChromeOptions()\n            chrome_options.add_argument('--no-sandbox')\n            chrome_options.add_argument('--disable-extensions')\n            chrome_options.add_argument('--disable-gpu')\n            # chrome_options.add_argument('--headless')\n            chrome_options.add_argument('--window-size=1920,1080')\n            chrome_options.add_argument('--start-maximized')\n    \n        # invoke firefox driver using webdriver manager\n        if browser_name == \"firefox\":\n            driver = webdriver.Firefox(executable_path=GeckoDriverManager().install())\n    \n>       if --env_name == \"US\":\nE       TypeError: bad operand type for unary -: 'str'\n\ntests\\conftest.py:62: TypeError\n", "test_name": "test_VerifyAmazonHomeSignInPage", "rerun": "0"}}, "suite_name": "tests/amazon_suite_test.py"}}}, "date": "June 05, 2022", "start_time": 1654451926.7495968, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "1"}